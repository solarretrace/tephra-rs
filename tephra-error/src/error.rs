////////////////////////////////////////////////////////////////////////////////
// Tephra parser library
////////////////////////////////////////////////////////////////////////////////
// Copyright 2022 Skylor R. Schermer
// This code is dual licenced using the MIT or Apache 2 license.
// See licence-mit.md and licence-apache.md for details.
////////////////////////////////////////////////////////////////////////////////
//! Parse error.
////////////////////////////////////////////////////////////////////////////////
// TODO: This module is currently under development.
#![allow(unused)]
#![allow(missing_docs)]

// Standard library imports.
use std::error::Error;


////////////////////////////////////////////////////////////////////////////////
// Error traits.
////////////////////////////////////////////////////////////////////////////////

/// Provides a method to convert an error into an owned error.
pub trait IntoErrorOwned {
    /// Converts an error into an owned error.
    fn into_owned(self: Box<Self>) -> Box<dyn std::error::Error + 'static>;
}


/// An `Error` that implements `ToErrorOwned`.
pub trait OwnableError<'text>: std::error::Error + IntoErrorOwned + 'text {}

impl<'text, T> OwnableError<'text> for T
    where T: std::error::Error + IntoErrorOwned + 'text {}


////////////////////////////////////////////////////////////////////////////////
// Error types.
////////////////////////////////////////////////////////////////////////////////

/// A generic parse error to be returned by a combinator, scoped to the lifetime
/// of the source text.
pub type ParseError<'text> = Box<dyn OwnableError<'text>>;



